{"ast":null,"code":"var _jsxFileName = \"D:\\\\project ardhi\\\\getfit-admin\\\\src\\\\layouts\\\\medicalRecord\\\\components\\\\CreateMedicalRecord\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport DynamicForm from \"./DynamicForm\";\nimport { getAllAppointment } from \"_api/appointmentApi\";\nimport { useDispatch } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { dateFormater } from \"helpers/DateHelpers\";\nimport MDInput from \"components/MDInput\";\nimport { createMedicalRecordAction } from \"layouts/medicalRecord/medicalRecordAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateMedicalRecord() {\n  _s();\n\n  const [fieldMedicalRecord, setFieldMedicalRecord] = useState([{\n    key: \"\",\n    value: \"\"\n  }]);\n  const [appointmentData, setAppointmentData] = useState(null);\n  const [selectedAppointment, setSelectedAppointment] = useState(null);\n  const dispatch = useDispatch();\n  const MySwal = withReactContent(Swal);\n  useEffect(() => {\n    if (appointmentData === null) {\n      getAllAppointment().then(response => {\n        setAppointmentData(response.data.data);\n      }).catch(err => {\n        err.clientMessage = \"Something went wrong\";\n        MySwal.fire({\n          title: \"Can't show Appointment\",\n          icon: \"error\"\n        });\n      });\n    }\n  }, []);\n  console.log(appointmentData);\n\n  function addFieldHandle(index) {\n    setFieldMedicalRecord([...fieldMedicalRecord, {\n      key: index,\n      value: \" \"\n    }]);\n  }\n\n  function removeFieldHandle(index) {\n    let tempField = [...fieldMedicalRecord];\n    tempField.splice(index, 1);\n    setFieldMedicalRecord(tempField);\n  }\n\n  function editFieldHandle(index, keyInput, valueInput) {\n    let tempField = [...fieldMedicalRecord];\n\n    if (keyInput || valueInput) {\n      let tempValue = {\n        key: keyInput ? keyInput : fieldMedicalRecord[index].key,\n        value: valueInput ? valueInput : fieldMedicalRecord[index].value\n      };\n      tempField[index] = tempValue;\n    }\n\n    setFieldMedicalRecord(tempField);\n  }\n\n  function submitFieldHandle() {\n    console.log(fieldMedicalRecord);\n    console.log(selectedAppointment);\n\n    if (fieldMedicalRecord.length === 0 || !fieldMedicalRecord[0].key || !fieldMedicalRecord[0].value) {\n      MySwal.fire({\n        title: \"Medical Record Can't be Empty\",\n        icon: \"error\"\n      });\n    } else if (!selectedAppointment) {\n      MySwal.fire({\n        title: \"Select Appointment First\",\n        icon: \"error\"\n      });\n    } else {\n      console.log(selectedAppointment);\n    }\n\n    dispatch(createMedicalRecordAction(medicalRecord, fieldMedicalRecord));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex flex-col justify-center items-center gap-[20px] px-[20px] border-blue-500 border-solid border-l-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2/3  p-2 rounded-xl flex flex-col gap-[10px] relative\",\n        children: [/*#__PURE__*/_jsxDEV(MDInput, {\n          id: \"appointment\",\n          select: true,\n          label: \"Select Appointment\",\n          onChange: e => setSelectedAppointment(e.target.value),\n          SelectProps: {\n            native: true\n          },\n          fullWidth: true,\n          helperText: \"Please Select the Appointment first...\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            selected: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), appointmentData === null || appointmentData === void 0 ? void 0 : appointmentData.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            children: `${option.appointment_type} ____ ${option.patient_detail.name} ____ ${dateFormater(option.date_appointment)} ____ ${option.time_appointment} WIB`\n          }, option._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DynamicForm, {\n          removeHandle: index => removeFieldHandle(index),\n          fieldList: fieldMedicalRecord,\n          addHandle: index => addFieldHandle(index),\n          editHandle: (index, key, value) => editFieldHandle(index, key, value),\n          submitHandle: () => submitFieldHandle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CreateMedicalRecord, \"cFGrtCaOXmsDvdSQPyy5WFEI2BU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateMedicalRecord;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMedicalRecord\");","map":{"version":3,"names":["React","useEffect","useState","DynamicForm","getAllAppointment","useDispatch","Swal","withReactContent","dateFormater","MDInput","createMedicalRecordAction","CreateMedicalRecord","fieldMedicalRecord","setFieldMedicalRecord","key","value","appointmentData","setAppointmentData","selectedAppointment","setSelectedAppointment","dispatch","MySwal","then","response","data","catch","err","clientMessage","fire","title","icon","console","log","addFieldHandle","index","removeFieldHandle","tempField","splice","editFieldHandle","keyInput","valueInput","tempValue","submitFieldHandle","length","medicalRecord","e","target","native","map","option","appointment_type","patient_detail","name","date_appointment","time_appointment","_id"],"sources":["D:/project ardhi/getfit-admin/src/layouts/medicalRecord/components/CreateMedicalRecord/index.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport DynamicForm from \"./DynamicForm\";\r\nimport { getAllAppointment } from \"_api/appointmentApi\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport { dateFormater } from \"helpers/DateHelpers\";\r\nimport MDInput from \"components/MDInput\";\r\nimport { createMedicalRecordAction } from \"layouts/medicalRecord/medicalRecordAction\";\r\n\r\nexport default function CreateMedicalRecord() {\r\n  const [fieldMedicalRecord, setFieldMedicalRecord] = useState([{ key: \"\", value: \"\" }]);\r\n  const [appointmentData, setAppointmentData] = useState(null);\r\n  const [selectedAppointment, setSelectedAppointment] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const MySwal = withReactContent(Swal);\r\n\r\n  useEffect(() => {\r\n    if (appointmentData === null) {\r\n      getAllAppointment()\r\n        .then((response) => {\r\n          setAppointmentData(response.data.data);\r\n        })\r\n        .catch((err) => {\r\n          err.clientMessage = \"Something went wrong\";\r\n          MySwal.fire({\r\n            title: \"Can't show Appointment\",\r\n            icon: \"error\",\r\n          });\r\n        });\r\n    }\r\n  }, []);\r\n  console.log(appointmentData);\r\n\r\n  function addFieldHandle(index) {\r\n    setFieldMedicalRecord([...fieldMedicalRecord, { key: index, value: \" \" }]);\r\n  }\r\n\r\n  function removeFieldHandle(index) {\r\n    let tempField = [...fieldMedicalRecord];\r\n    tempField.splice(index, 1);\r\n    setFieldMedicalRecord(tempField);\r\n  }\r\n\r\n  function editFieldHandle(index, keyInput, valueInput) {\r\n    let tempField = [...fieldMedicalRecord];\r\n    if (keyInput || valueInput) {\r\n      let tempValue = {\r\n        key: keyInput ? keyInput : fieldMedicalRecord[index].key,\r\n        value: valueInput ? valueInput : fieldMedicalRecord[index].value,\r\n      };\r\n\r\n      tempField[index] = tempValue;\r\n    }\r\n    setFieldMedicalRecord(tempField);\r\n  }\r\n\r\n  function submitFieldHandle() {\r\n    console.log(fieldMedicalRecord);\r\n    console.log(selectedAppointment);\r\n    if (\r\n      fieldMedicalRecord.length === 0 ||\r\n      !fieldMedicalRecord[0].key ||\r\n      !fieldMedicalRecord[0].value\r\n    ) {\r\n      MySwal.fire({\r\n        title: \"Medical Record Can't be Empty\",\r\n        icon: \"error\",\r\n      });\r\n    } else if (!selectedAppointment) {\r\n      MySwal.fire({\r\n        title: \"Select Appointment First\",\r\n        icon: \"error\",\r\n      });\r\n    } else {\r\n      console.log(selectedAppointment);\r\n    }\r\n    dispatch(createMedicalRecordAction(medicalRecord, fieldMedicalRecord));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full flex flex-col justify-center items-center gap-[20px] px-[20px] border-blue-500 border-solid border-l-4\">\r\n        <div className=\"w-2/3  p-2 rounded-xl flex flex-col gap-[10px] relative\">\r\n          <MDInput\r\n            id=\"appointment\"\r\n            select\r\n            label=\"Select Appointment\"\r\n            onChange={(e) => setSelectedAppointment(e.target.value)}\r\n            SelectProps={{\r\n              native: true,\r\n            }}\r\n            fullWidth\r\n            helperText=\"Please Select the Appointment first...\"\r\n          >\r\n            <option value=\"\" selected></option>\r\n            {appointmentData?.map((option) => (\r\n              <option key={option._id} value={option}>\r\n                {`${option.appointment_type} ____ ${option.patient_detail.name} ____ ${dateFormater(\r\n                  option.date_appointment\r\n                )} ____ ${option.time_appointment} WIB`}\r\n              </option>\r\n            ))}\r\n          </MDInput>\r\n          <DynamicForm\r\n            removeHandle={(index) => removeFieldHandle(index)}\r\n            fieldList={fieldMedicalRecord}\r\n            addHandle={(index) => addFieldHandle(index)}\r\n            editHandle={(index, key, value) => editFieldHandle(index, key, value)}\r\n            submitHandle={() => submitFieldHandle()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}