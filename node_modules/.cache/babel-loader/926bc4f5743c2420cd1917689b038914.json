{"ast":null,"code":"/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, \"\");\n    localStorage.setItem(`${key}_expiresIn`, \"\");\n  } catch (e) {\n    console.log(`removeStorage: Error removing key [\"${key}\"] from localStorage: ${JSON.stringify(e)}`);\n    return false;\n  }\n\n  return true;\n}\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n            params:\r\n                key <string> : localStorage key\r\n            returns:\r\n                <string> : value of localStorage key\r\n                null : in case of expired key or failure\r\n         */\n\nexport function getStorage(key) {\n  //  epoch time, lets deal only with integer\n  const now = Date.now(); // set expiration for storage\n\n  let expiresIn = localStorage.getItem(`${key}_expiresIn`);\n\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n\n  expiresIn = Math.abs(expiresIn);\n\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  }\n\n  try {\n    const value = localStorage.getItem(key);\n    return value;\n  } catch (e) {\n    console.log(`getStorage: Error reading key [\"${key}\"] from localStorage: ${JSON.stringify(e)}`);\n    return null;\n  }\n}\n/*  setStorage: writes a key into localStorage setting a expire time\r\n            params:\r\n                key <string>     : localStorage key\r\n                value <string>   : localStorage value\r\n                expires <number> : number of seconds from now to expire the key\r\n            returns:\r\n                <boolean> : telling if operation succeeded\r\n         */\n\nexport function setStorage(key, value, expiring) {\n  let expires = expiring;\n\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  const now = Date.now(); //  millisecs since epoch time, lets deal only with integer\n\n  const schedule = now + expires * 1000;\n\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(`${key}_expiresIn`, schedule);\n  } catch (e) {\n    console.log(`setStorage: Error setting key [\"${key}\"] in localStorage: \" ${JSON.stringify(e)}`);\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expiring","expires","schedule"],"sources":["D:/project ardhi/getfit-admin/src/helpers/LocalStorageHelpers.jsx"],"sourcesContent":["/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function removeStorage(key) {\r\n  try {\r\n    localStorage.setItem(key, \"\");\r\n    localStorage.setItem(`${key}_expiresIn`, \"\");\r\n  } catch (e) {\r\n    console.log(\r\n      `removeStorage: Error removing key [\"${key}\"] from localStorage: ${JSON.stringify(e)}`\r\n    );\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n            params:\r\n                key <string> : localStorage key\r\n            returns:\r\n                <string> : value of localStorage key\r\n                null : in case of expired key or failure\r\n         */\r\nexport function getStorage(key) {\r\n  //  epoch time, lets deal only with integer\r\n  const now = Date.now();\r\n  // set expiration for storage\r\n\r\n  let expiresIn = localStorage.getItem(`${key}_expiresIn`);\r\n  if (expiresIn === undefined || expiresIn === null) {\r\n    expiresIn = 0;\r\n  }\r\n\r\n  expiresIn = Math.abs(expiresIn);\r\n  if (expiresIn < now) {\r\n    // Expired\r\n    removeStorage(key);\r\n    return null;\r\n  }\r\n  try {\r\n    const value = localStorage.getItem(key);\r\n    return value;\r\n  } catch (e) {\r\n    console.log(`getStorage: Error reading key [\"${key}\"] from localStorage: ${JSON.stringify(e)}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n/*  setStorage: writes a key into localStorage setting a expire time\r\n            params:\r\n                key <string>     : localStorage key\r\n                value <string>   : localStorage value\r\n                expires <number> : number of seconds from now to expire the key\r\n            returns:\r\n                <boolean> : telling if operation succeeded\r\n         */\r\nexport function setStorage(key, value, expiring) {\r\n  let expires = expiring;\r\n  if (expires === undefined || expires === null) {\r\n    expires = 24 * 60 * 60; // default: seconds for 1 day\r\n  }\r\n  const now = Date.now(); //  millisecs since epoch time, lets deal only with integer\r\n  const schedule = now + expires * 1000;\r\n  try {\r\n    localStorage.setItem(key, value);\r\n    localStorage.setItem(`${key}_expiresIn`, schedule);\r\n  } catch (e) {\r\n    console.log(`setStorage: Error setting key [\"${key}\"] in localStorage: \" ${JSON.stringify(e)}`);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;EACjC,IAAI;IACFC,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0B,EAA1B;IACAC,YAAY,CAACC,OAAb,CAAsB,GAAEF,GAAI,YAA5B,EAAyC,EAAzC;EACD,CAHD,CAGE,OAAOG,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CACG,uCAAsCL,GAAI,yBAAwBM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAkB,EADvF;IAGA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,UAAT,CAAoBR,GAApB,EAAyB;EAC9B;EACA,MAAMS,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAF8B,CAG9B;;EAEA,IAAIE,SAAS,GAAGV,YAAY,CAACW,OAAb,CAAsB,GAAEZ,GAAI,YAA5B,CAAhB;;EACA,IAAIW,SAAS,KAAKE,SAAd,IAA2BF,SAAS,KAAK,IAA7C,EAAmD;IACjDA,SAAS,GAAG,CAAZ;EACD;;EAEDA,SAAS,GAAGG,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAZ;;EACA,IAAIA,SAAS,GAAGF,GAAhB,EAAqB;IACnB;IACAV,aAAa,CAACC,GAAD,CAAb;IACA,OAAO,IAAP;EACD;;EACD,IAAI;IACF,MAAMgB,KAAK,GAAGf,YAAY,CAACW,OAAb,CAAqBZ,GAArB,CAAd;IACA,OAAOgB,KAAP;EACD,CAHD,CAGE,OAAOb,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAa,mCAAkCL,GAAI,yBAAwBM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAkB,EAA7F;IACA,OAAO,IAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,UAAT,CAAoBjB,GAApB,EAAyBgB,KAAzB,EAAgCE,QAAhC,EAA0C;EAC/C,IAAIC,OAAO,GAAGD,QAAd;;EACA,IAAIC,OAAO,KAAKN,SAAZ,IAAyBM,OAAO,KAAK,IAAzC,EAA+C;IAC7CA,OAAO,GAAG,KAAK,EAAL,GAAU,EAApB,CAD6C,CACrB;EACzB;;EACD,MAAMV,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAL+C,CAKvB;;EACxB,MAAMW,QAAQ,GAAGX,GAAG,GAAGU,OAAO,GAAG,IAAjC;;EACA,IAAI;IACFlB,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0BgB,KAA1B;IACAf,YAAY,CAACC,OAAb,CAAsB,GAAEF,GAAI,YAA5B,EAAyCoB,QAAzC;EACD,CAHD,CAGE,OAAOjB,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAa,mCAAkCL,GAAI,yBAAwBM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAkB,EAA7F;IACA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}